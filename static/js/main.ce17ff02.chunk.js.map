{"version":3,"sources":["util/theme.ts","components/themeGrid/ThemeModal.tsx","components/themeGrid/GridItem.tsx","components/themeGrid/ThemeGrid.tsx","App.tsx","index.tsx"],"names":["customColors","theme","extendTheme","config","initialColorMode","useSystemColorMode","components","colors","styles","global","body","bg","ThemeModal","props","isOpen","onClose","d","data","value","Object","entries","instantWM","map","e","i","instantMENU","a","k","replaceAll","useClipboard","onCopy","hasCopied","borderRadius","borderColor","borderWidth","backgroundColor","width","justifyContent","padding","flex","name","onClick","size","colorScheme","background","borderBottomWidth","borderBottomColor","_hover","p","mr","toLowerCase","as","pt","GridItem","useDisclosure","onOpen","array","values","length","Math","round","getThreeColors","p1","p2","p3","spacing","height","focus","mt","darkFocus","hoverFocus","darkHoverFocus","ThemeGrid","triggerAnim","useState","themeData","setThemeData","useEffect","fetch","then","r","json","_","catch","console","log","columns","App","in","maxW","centerContent","direction","alignItems","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce17ff02.chunk.js","sourcesContent":["import {\n  Colors,\n  extendTheme,\n  ThemeComponents,\n  ThemeConfig,\n} from \"@chakra-ui/react\";\n\nconst config: ThemeConfig = {\n  initialColorMode: \"dark\",\n  useSystemColorMode: false,\n};\n\nconst components: ThemeComponents = {};\n\nconst colors: Colors = {};\n\nconst styles = {\n  global: {\n    body: {\n      bg: \"#292F3A\",\n    },\n  },\n};\n\nconst customColors = {\n  borderBrand: \"#4DADD4\",\n  borderCardBrand: \"#747c90\",\n  close: \"#E1527E\",\n  darkClose: \"#CB3563\",\n  hoverClose: \"#D37492\",\n  darkHoverClose: \"#CE577C\",\n};\nconst theme = extendTheme({ config, components, colors, styles });\nexport default theme;\nexport { customColors };\n","import React from \"react\";\nimport {\n  Button,\n  Code,\n  Container,\n  Flex,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Square,\n  Text,\n  useClipboard,\n} from \"@chakra-ui/react\";\nimport { ThemeModalProps } from \"./index\";\nimport { customColors } from \"../../util/theme\";\n\nconst ThemeModal: React.FC<ThemeModalProps> = (props) => {\n  const { isOpen, onClose } = props;\n  const d = props.data;\n  const value = `${Object.entries(d.instantWM).map((e, i) => {\n    return `instantwm.${e[0]} : ${e[1]}\\r\\n`;\n  })}${Object.entries(d.instantMENU).map((e, i) => {\n    return Object.entries(e[1]).map((a, k) => {\n      return `instantmenu.${e[0]}.${a[0]} : ${a[1] as string}\\r\\n`;\n    });\n  })}\n  `.replaceAll(\",\", \"\");\n  const { onCopy, hasCopied } = useClipboard(value);\n\n  const handleCopy = () => {\n    onCopy();\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent\n        borderRadius=\"0\"\n        borderColor={customColors.borderBrand}\n        borderWidth=\"2px\"\n        backgroundColor=\"#292F3A\"\n      >\n        <Flex width=\"full\" justifyContent=\"space-between\" padding={1}>\n          <ModalHeader flex=\"1\">{d.name}</ModalHeader>\n          <Button\n            onClick={onClose}\n            size=\"xs\"\n            borderRadius=\"0\"\n            colorScheme=\"transparent\"\n            background={customColors.close}\n            borderBottomWidth=\"5px\"\n            borderBottomColor={customColors.darkClose}\n            _hover={{\n              borderBottomWidth: \"8px\",\n              background: customColors.hoverClose,\n              borderBottomColor: customColors.darkHoverClose,\n            }}\n          />\n        </Flex>\n        <ModalBody width=\"100%\">\n          <Container size=\"container.lg\">\n            <Code width=\"full\" borderRadius=\"0\" p={2}>\n              {Object.entries(d.instantWM).map((e, i) => (\n                <Text key={i}>\n                  <Square\n                    size={15}\n                    backgroundColor={e[1]}\n                    mr={1}\n                    d=\"inline-block\"\n                  />\n                  instantwm.{e[0].toLowerCase()} : <Text as=\"span\">{e[1]}</Text>\n                </Text>\n              ))}\n              {Object.entries(d.instantMENU).map((e, i) =>\n                Object.entries(e[1]).map((a, k) => (\n                  <Text key={k}>\n                    <Square\n                      size={15}\n                      backgroundColor={a[1] as string}\n                      mr={1}\n                      d=\"inline-block\"\n                    />\n                    instantmenu.{e[0]}.{a[0]} :{\" \"}\n                    <Text as=\"span\">{a[1] as string}</Text>\n                  </Text>\n                ))\n              )}\n            </Code>\n          </Container>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            width=\"full\"\n            borderRadius=\"0\"\n            pt={1}\n            colorScheme=\"transparent\"\n            background={customColors.close}\n            borderBottomWidth=\"5px\"\n            borderBottomColor={customColors.darkClose}\n            _hover={{\n              borderBottomWidth: \"8px\",\n              background: customColors.hoverClose,\n              borderBottomColor: customColors.darkHoverClose,\n            }}\n            onClick={handleCopy}\n          >\n            {hasCopied ? \"Theme copied to clipboard\" : \"Copy to clipboard\"}\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default ThemeModal;\n","import React from \"react\";\nimport { ThemeData } from \"./index\";\nimport {\n  Box,\n  Text,\n  Center,\n  VStack,\n  Button,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport { customColors } from \"../../util/theme\";\nimport ThemeModal from \"./ThemeModal\";\n\nconst GridItem: React.FC<{ data: ThemeData }> = (props) => {\n  const d = props.data;\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const getThreeColors = (): string[] => {\n    const array = Object.values(d.instantWM);\n    const p1 = array[array.length - 1];\n    const p2 = array[0];\n    const p3 = array[Math.round((array.length - 1) / 2)];\n    return [p1, p2, p3];\n  };\n\n  const [p1, p2, p3] = getThreeColors();\n\n  return (\n    <>\n      <ThemeModal isOpen={isOpen} onClose={onClose} data={d} />\n      <Box\n        borderRadius={0}\n        borderWidth=\"2px\"\n        width=\"full\"\n        borderColor={customColors.borderCardBrand}\n        padding={3}\n      >\n        <Center>\n          <Text>{d.name}</Text>\n        </Center>\n        <VStack spacing=\"3px\">\n          <Box bg={p1} width=\"100%\" height=\"1rem\" />\n          <Box bg={p2} width=\"100%\" height=\"1rem\" />\n          <Box bg={p3} width=\"100%\" height=\"1rem\" />\n        </VStack>\n        <Button\n          onClick={onOpen}\n          background={d.instantWM.focus}\n          colorScheme=\"transparent\"\n          borderRadius=\"0\"\n          pt={1}\n          mt={4}\n          borderBottomWidth=\"5px\"\n          borderBottomColor={d.instantWM.darkFocus}\n          _hover={{\n            borderBottomWidth: \"8px\",\n            background: d.instantWM.hoverFocus,\n            borderBottomColor: d.instantWM.darkHoverFocus,\n          }}\n        >\n          View\n        </Button>\n      </Box>\n    </>\n  );\n};\n\nexport default GridItem;\n","import { SimpleGrid } from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { ThemeData } from \"./index\";\nimport GridItem from \"./GridItem\";\nimport { customColors } from \"../../util/theme\";\n\ninterface ThemeGridProps {\n  triggerAnim: () => void;\n}\n\nconst ThemeGrid: React.FC<ThemeGridProps> = (props) => {\n  const { triggerAnim } = props;\n  const [themeData, setThemeData] = useState<ThemeData[]>([]);\n\n  useEffect(() => {\n    fetch(\n      \"https://raw.githubusercontent.com/uvera/instantRICE-resources/main/themes.json\"\n    )\n      .then((r) => r.json())\n      .then((r) => setThemeData(r))\n      .then((_) => triggerAnim())\n      .catch(console.log);\n  }, [triggerAnim]);\n\n  return (\n    <SimpleGrid\n      columns={[2, 3]}\n      spacing=\"40px\"\n      width=\"full\"\n      borderWidth=\"2px\"\n      borderColor={customColors.borderBrand}\n      padding={3}\n      height=\"full\"\n    >\n      {themeData.map((e: ThemeData, i) => (\n        <GridItem data={e} key={i} />\n      ))}\n    </SimpleGrid>\n  );\n};\n\nexport default ThemeGrid;\n","import React from \"react\";\nimport {\n  Container,\n  Flex,\n  Heading,\n  SlideFade,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport ThemeGrid from \"./components/themeGrid/ThemeGrid\";\n\nfunction App() {\n  const { isOpen, onOpen } = useDisclosure();\n\n  return (\n    <SlideFade in={isOpen}>\n      <Container maxW=\"container.xl\" centerContent>\n        <Flex direction=\"column\" width=\"full\" alignItems=\"center\">\n          <Heading as=\"h1\" size=\"lg\" mt={4}>\n            InstantRICE\n          </Heading>\n          <ThemeGrid triggerAnim={onOpen} />\n        </Flex>\n      </Container>\n    </SlideFade>\n  );\n}\n\nexport default App;\n","import { ChakraProvider, ColorModeScript } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport theme from \"./util/theme\";\nimport \"focus-visible/dist/focus-visible\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <ChakraProvider theme={theme}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}