{"version":3,"sources":["util/theme.ts","components/themeGrid/ThemeModal.tsx","components/themeGrid/GridItem.tsx","components/themeGrid/ThemeGrid.tsx","App.tsx","index.tsx"],"names":["customColors","theme","extendTheme","config","initialColorMode","useSystemColorMode","components","colors","styles","global","body","bg","fonts","heading","ThemeModal","props","isOpen","onClose","d","data","value","Object","entries","instantWM","map","e","i","toLowerCase","instantMENU","a","k","replaceAll","useClipboard","onCopy","hasCopied","motionPreset","borderRadius","borderColor","borderWidth","backgroundColor","flex","width","justifyContent","alignItems","padding","size","name","onClick","colorScheme","background","borderBottomWidth","borderBottomColor","_hover","p","fontFamily","mr","as","pt","GridItem","useDisclosure","onOpen","array","values","length","Math","round","getThreeColors","p1","p2","p3","mb","spacing","height","focus","mt","darkFocus","hoverFocus","darkHoverFocus","ThemeGrid","triggerAnim","useState","themeData","setThemeData","useEffect","fetch","then","r","json","_","catch","console","log","columns","App","in","maxW","centerContent","direction","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f2d5d53d.chunk.js","sourcesContent":["import {\n  Colors,\n  extendTheme,\n  ThemeComponents,\n  ThemeConfig,\n} from \"@chakra-ui/react\";\n\nconst config: ThemeConfig = {\n  initialColorMode: \"dark\",\n  useSystemColorMode: false,\n};\n\nconst components: ThemeComponents = {};\n\nconst colors: Colors = {};\n\nconst styles = {\n  global: {\n    body: {\n      bg: \"#292F3A\",\n    },\n  },\n};\n\nconst fonts = {\n  heading: \"Inter\",\n  body: \"Roboto\",\n};\n\nconst customColors = {\n  borderBrand: \"#4DADD4\",\n  borderCardBrand: \"#747c90\",\n  close: \"#E1527E\",\n  darkClose: \"#CB3563\",\n  hoverClose: \"#D37492\",\n  darkHoverClose: \"#CE577C\",\n};\nconst theme = extendTheme({ config, components, colors, styles, fonts });\nexport default theme;\nexport { customColors };\n","import React from \"react\";\nimport {\n  Button,\n  Code,\n  Container,\n  Flex,\n  Heading,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Square,\n  Text,\n  useClipboard,\n} from \"@chakra-ui/react\";\nimport { ThemeModalProps } from \"./index\";\nimport { customColors } from \"../../util/theme\";\n\nconst ThemeModal: React.FC<ThemeModalProps> = (props) => {\n  const { isOpen, onClose } = props;\n  const d = props.data;\n  const value = `${Object.entries(d.instantWM).map((e, i) => {\n    return `instantwm.${e[0]} : ${e[1].toLowerCase()}\\r\\n`;\n  })}${Object.entries(d.instantMENU).map((e, i) => {\n    return Object.entries(e[1]).map((a, k) => {\n      return `instantmenu.${e[0]}.${\n        a[0]\n      } : ${(a[1] as string).toLowerCase()}\\r\\n`;\n    });\n  })}\n  `.replaceAll(\",\", \"\");\n  const { onCopy, hasCopied } = useClipboard(value);\n\n  const handleCopy = () => {\n    onCopy();\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} motionPreset=\"slideInBottom\">\n      <ModalOverlay />\n      <ModalContent\n        borderRadius=\"0\"\n        borderColor={customColors.borderBrand}\n        borderWidth=\"2px\"\n        backgroundColor=\"#292F3A\"\n      >\n        <ModalHeader flex=\"1\">\n          <Flex\n            width=\"full\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n            padding={1}\n          >\n            <Heading size=\"md\">{d.name}</Heading>\n            <Button\n              onClick={onClose}\n              size=\"xs\"\n              borderRadius=\"0\"\n              colorScheme=\"transparent\"\n              background={customColors.close}\n              borderBottomWidth=\"5px\"\n              borderBottomColor={customColors.darkClose}\n              _hover={{\n                borderBottomWidth: \"8px\",\n                background: customColors.hoverClose,\n                borderBottomColor: customColors.darkHoverClose,\n              }}\n            />\n          </Flex>\n        </ModalHeader>\n        <ModalBody width=\"100%\">\n          <Container size=\"container.lg\">\n            <Code width=\"full\" borderRadius=\"0\" p={2} fontFamily=\"Fira Code\">\n              {Object.entries(d.instantWM).map((e, i) => (\n                <Text key={i}>\n                  <Square\n                    size={15}\n                    backgroundColor={e[1]}\n                    mr={1}\n                    d=\"inline-block\"\n                  />\n                  instantwm.{e[0].toLowerCase()} :{\" \"}\n                  <Text as=\"span\">{e[1].toLowerCase()}</Text>\n                </Text>\n              ))}\n              {Object.entries(d.instantMENU).map((e, i) =>\n                Object.entries(e[1]).map((a, k) => (\n                  <Text key={k}>\n                    <Square\n                      size={15}\n                      backgroundColor={a[1] as string}\n                      mr={1}\n                      d=\"inline-block\"\n                    />\n                    instantmenu.{e[0]}.{a[0]} :{\" \"}\n                    <Text as=\"span\">{(a[1] as string).toLowerCase()}</Text>\n                  </Text>\n                ))\n              )}\n            </Code>\n          </Container>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            width=\"full\"\n            borderRadius=\"0\"\n            pt={1}\n            colorScheme=\"transparent\"\n            background={customColors.close}\n            borderBottomWidth=\"5px\"\n            borderBottomColor={customColors.darkClose}\n            _hover={{\n              borderBottomWidth: \"8px\",\n              background: customColors.hoverClose,\n              borderBottomColor: customColors.darkHoverClose,\n            }}\n            onClick={handleCopy}\n          >\n            {hasCopied ? \"Theme copied to clipboard\" : \"Copy to clipboard\"}\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default ThemeModal;\n","import React from \"react\";\nimport { ThemeData } from \"./index\";\nimport {\n  Box,\n  Button,\n  Center,\n  Heading,\n  useDisclosure,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { customColors } from \"../../util/theme\";\nimport ThemeModal from \"./ThemeModal\";\n\nconst GridItem: React.FC<{ data: ThemeData }> = (props) => {\n  const d = props.data;\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const getThreeColors = (): string[] => {\n    const array = Object.values(d.instantWM);\n    const p1 = array[array.length - 1];\n    const p2 = array[0];\n    const p3 = array[Math.round((array.length - 1) / 2)];\n    return [p1, p2, p3];\n  };\n\n  const [p1, p2, p3] = getThreeColors();\n\n  return (\n    <>\n      <ThemeModal isOpen={isOpen} onClose={onClose} data={d} />\n      <Box\n        borderRadius={0}\n        borderWidth=\"2px\"\n        width=\"full\"\n        borderColor={customColors.borderCardBrand}\n        padding={3}\n        _hover={{\n          borderColor: customColors.borderBrand,\n        }}\n      >\n        <Center mb={0.5}>\n          <Heading as=\"h2\" size=\"md\">\n            {d.name}\n          </Heading>\n        </Center>\n        <VStack spacing=\"3px\">\n          <Box bg={p1} width=\"100%\" height=\"1rem\" />\n          <Box bg={p2} width=\"100%\" height=\"1rem\" />\n          <Box bg={p3} width=\"100%\" height=\"1rem\" />\n        </VStack>\n        <Button\n          onClick={onOpen}\n          background={d.instantWM.focus}\n          colorScheme=\"transparent\"\n          borderRadius=\"0\"\n          pt={1}\n          mt={4}\n          borderBottomWidth=\"5px\"\n          borderBottomColor={d.instantWM.darkFocus}\n          _hover={{\n            borderBottomWidth: \"8px\",\n            background: d.instantWM.hoverFocus,\n            borderBottomColor: d.instantWM.darkHoverFocus,\n          }}\n        >\n          View\n        </Button>\n      </Box>\n    </>\n  );\n};\n\nexport default GridItem;\n","import { SimpleGrid } from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { ThemeData } from \"./index\";\nimport GridItem from \"./GridItem\";\nimport { customColors } from \"../../util/theme\";\n\ninterface ThemeGridProps {\n  triggerAnim: () => void;\n}\n\nconst ThemeGrid: React.FC<ThemeGridProps> = (props) => {\n  const { triggerAnim } = props;\n  const [themeData, setThemeData] = useState<ThemeData[]>([]);\n\n  useEffect(() => {\n    fetch(\n      \"https://raw.githubusercontent.com/uvera/instantRICE-resources/main/themes.json\"\n    )\n      .then((r) => r.json())\n      .then((r) => setThemeData(r))\n      .then((_) => triggerAnim())\n      .catch(console.log);\n  }, [triggerAnim]);\n\n  return (\n    <SimpleGrid\n      columns={[2, 3]}\n      spacing=\"40px\"\n      width=\"full\"\n      borderWidth=\"2px\"\n      borderColor={customColors.borderBrand}\n      padding={3}\n      height=\"full\"\n    >\n      {themeData.map((e: ThemeData, i) => (\n        <GridItem data={e} key={i} />\n      ))}\n    </SimpleGrid>\n  );\n};\n\nexport default ThemeGrid;\n","import React from \"react\";\nimport {\n  Container,\n  Flex,\n  Heading,\n  SlideFade,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport ThemeGrid from \"./components/themeGrid/ThemeGrid\";\nimport \"@fontsource/inter/400.css\";\nimport \"@fontsource/roboto/500.css\";\nimport \"@fontsource/fira-code/300.css\";\n\nfunction App() {\n  const { isOpen, onOpen } = useDisclosure();\n\n  return (\n    <SlideFade in={isOpen}>\n      <Container maxW=\"container.xl\" centerContent>\n        <Flex direction=\"column\" width=\"full\" alignItems=\"center\">\n          <Heading as=\"h1\" size=\"lg\" mt={4} mb={2}>\n            InstantRICE\n          </Heading>\n          <ThemeGrid triggerAnim={onOpen} />\n        </Flex>\n      </Container>\n    </SlideFade>\n  );\n}\n\nexport default App;\n","import { ChakraProvider, ColorModeScript } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport theme from \"./util/theme\";\nimport \"focus-visible/dist/focus-visible\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <ChakraProvider theme={theme}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}